/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type Skill = {
  _id: string
  _type: 'skill'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  uri?: Slug
  category?:
    | 'Backend'
    | 'CI/CD'
    | 'Frontend'
    | 'Infrastructure'
    | 'Misc'
    | 'Mobile'
    | 'Testing'
    | 'Tooling'
  proficiency?: 'beginner' | 'intermediate' | 'expert'
}

export type Language = {
  _id: string
  _type: 'language'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Array<
    {
      _key: string
    } & InternationalizedArrayStringValue
  >
  uri?: Slug
  proficiency?: 'fluent' | 'native'
  profile?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'profile'
  }
}

export type Job = {
  _id: string
  _type: 'job'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Array<
    {
      _key: string
    } & InternationalizedArrayStringValue
  >
  uri?: Slug
  company?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'company'
  }
  remote?: boolean
  contract?: boolean
  startDate?: string
  current?: boolean
  endDate?: string
  description?: Array<
    {
      _key: string
    } & InternationalizedArrayRichTextValue
  >
  skills?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'skill'
  }>
  profile?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'profile'
  }
}

export type Field = {
  _id: string
  _type: 'field'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Array<
    {
      _key: string
    } & InternationalizedArrayStringValue
  >
  uri?: Slug
}

export type Education = {
  _id: string
  _type: 'education'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Array<
    {
      _key: string
    } & InternationalizedArrayStringValue
  >
  uri?: Slug
  school?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'school'
  }
  completed?: boolean
  startDate?: string
  endDate?: string
  description?: Array<
    {
      _key: string
    } & InternationalizedArrayRichTextValue
  >
  fields?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'field'
  }>
  profile?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'profile'
  }
}

export type Company = {
  _id: string
  _type: 'company'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  uri?: Slug
  website?: string
  location?: string
}

export type Certification = {
  _id: string
  _type: 'certification'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  uri?: Slug
  school?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'school'
  }
  completed?: boolean
  certificate?: string
  certificationDate?: string
  description?: Array<
    {
      _key: string
    } & InternationalizedArrayRichTextValue
  >
  fields?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'field'
  }>
  profile?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'profile'
  }
}

export type Profile = {
  _id: string
  _type: 'profile'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  uri?: Slug
  title?: Array<
    {
      _key: string
    } & InternationalizedArrayStringValue
  >
  location?: string
  email?: string
  phone?: string
  biography?: Array<
    {
      _key: string
    } & InternationalizedArrayRichTextValue
  >
  github?: string
  linkedin?: string
  twitter?: string
}

export type School = {
  _id: string
  _type: 'school'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  uri?: Slug
  website?: string
  location?: string
}

export type InternationalizedArrayRichTextValue = {
  _type: 'internationalizedArrayRichTextValue'
  value?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type InternationalizedArrayTextValue = {
  _type: 'internationalizedArrayTextValue'
  value?: string
}

export type InternationalizedArrayStringValue = {
  _type: 'internationalizedArrayStringValue'
  value?: string
}

export type InternationalizedArrayRichText = Array<
  {
    _key: string
  } & InternationalizedArrayRichTextValue
>

export type InternationalizedArrayText = Array<
  {
    _key: string
  } & InternationalizedArrayTextValue
>

export type InternationalizedArrayString = Array<
  {
    _key: string
  } & InternationalizedArrayStringValue
>

export type MediaTag = {
  _id: string
  _type: 'media.tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Slug
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | SanityAssetSourceData
  | Skill
  | Language
  | Job
  | Field
  | Education
  | Company
  | Certification
  | Profile
  | School
  | InternationalizedArrayRichTextValue
  | InternationalizedArrayTextValue
  | InternationalizedArrayStringValue
  | InternationalizedArrayRichText
  | InternationalizedArrayText
  | InternationalizedArrayString
  | MediaTag
  | Slug
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./sanity/lib/queries.ts
// Variable: CERTIFICATION_QUERY
// Query: *[      _type == 'certification'      && profile->uri.current == $user      && !(_id in path('drafts.**'))    ] | order(startDate desc) {      "id": _id,      "title": name,      "about": description[_key == $locale][0].value,      "date": certificationDate,      "certificate": certificate,      "school": school-> { name, location, website, "uri": uri.current, "id": _id },      "fields": fields[]-> { "name": name[_key == $locale][0].value, "uri": uri.current, "id": _id }    }
export type CERTIFICATION_QUERYResult = Array<{
  id: string
  title: string | null
  about: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }> | null
  date: string | null
  certificate: string | null
  school: {
    name: string | null
    location: string | null
    website: string | null
    uri: string | null
    id: string
  } | null
  fields: Array<{
    name: string | null
    uri: string | null
    id: string
  }> | null
}>
// Variable: EDUCATION_QUERY
// Query: *[      _type == 'education'      && profile->uri.current == $user      && !(_id in path('drafts.**'))    ] | order(startDate desc) {      "id": _id,      "title": name[_key == $locale][0].value,      "about": description[_key == $locale][0].value,      "start": startDate,      "end": endDate,      "school": school-> { name, location, website, "uri": uri.current, "id": _id },      "fields": fields[]-> { "name": name[_key == $locale][0].value, "uri": uri.current, "id": _id }    }
export type EDUCATION_QUERYResult = Array<{
  id: string
  title: string | null
  about: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }> | null
  start: string | null
  end: string | null
  school: {
    name: string | null
    location: string | null
    website: string | null
    uri: string | null
    id: string
  } | null
  fields: Array<{
    name: string | null
    uri: string | null
    id: string
  }> | null
}>
// Variable: JOBS_QUERY
// Query: *[      _type == 'job'      && profile->uri.current == $user      && !(_id in path('drafts.**'))    ] | order(startDate desc) {      "id": _id,      "title": name[_key == $locale][0].value,      "about": description[_key == $locale][0].value,      "start": startDate,      "end": endDate,      current,      remote,      contract,      "company": company-> { name, location, website, "uri": uri.current, "id": _id },      "skills": skills[]-> { name, "uri": uri.current, "id": _id }    }
export type JOBS_QUERYResult = Array<{
  id: string
  title: string | null
  about: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }> | null
  start: string | null
  end: string | null
  current: boolean | null
  remote: boolean | null
  contract: boolean | null
  company: {
    name: string | null
    location: string | null
    website: string | null
    uri: string | null
    id: string
  } | null
  skills: Array<{
    name: string | null
    uri: string | null
    id: string
  }> | null
}>
// Variable: LANGUAGES_QUERY
// Query: *[      _type == 'language'      && profile->uri.current == $user      && !(_id in path('drafts.**'))    ] | order(name[_key == $locale][0].value asc) {      "id": _id,      "title": name[_key == $locale][0].value,      "proficiency": proficiency    }
export type LANGUAGES_QUERYResult = Array<{
  id: string
  title: string | null
  proficiency: 'fluent' | 'native' | null
}>
// Variable: PROFILE_QUERY
// Query: *[_type == 'profile' && uri.current == $user] {      email,      location,      name,      phone,      "profile": biography[_key == $locale][0].value,      "social": {        github,        linkedin,        twitter      },      "title": title[_key == $locale][0].value,    }[0]
export type PROFILE_QUERYResult = {
  email: string | null
  location: string | null
  name: string | null
  phone: string | null
  profile: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }> | null
  social: {
    github: string | null
    linkedin: string | null
    twitter: string | null
  }
  title: string | null
} | null
// Variable: SKILLS_QUERY
// Query: {      "backend": *[_type == 'skill' && category == 'Backend'] | order(name asc) {        "id": _id,        name,        proficiency,        "uri": uri.current      },      "cicd": *[_type == 'skill' && category == 'CI/CD'] | order(name asc) {        "id": _id,        name,        proficiency,        "uri": uri.current      },      "frontend": *[_type == 'skill' && category == 'Frontend'] | order(name asc) {        "id": _id,        name,        proficiency,        "uri": uri.current      },      "infra": *[_type == 'skill' && category == 'Infrastructure'] | order(name asc) {        "id": _id,        name,        proficiency,        "uri": uri.current      },      "misc": *[_type == 'skill' && category == 'Misc'] | order(name asc) {        "id": _id,        name,        proficiency,        "uri": uri.current      },      "mobile": *[_type == 'skill' && category == 'Mobile'] | order(name asc) {        "id": _id,        name,        proficiency,        "uri": uri.current      },      "testing": *[_type == 'skill' && category == 'Testing'] | order(name asc) {        "id": _id,        name,        proficiency,        "uri": uri.current      },      "tooling": *[_type == 'skill' && category == 'Tooling'] | order(name asc) {        "id": _id,        name,        proficiency,        "uri": uri.current      },    }
export type SKILLS_QUERYResult = {
  backend: Array<{
    id: string
    name: string | null
    proficiency: 'beginner' | 'expert' | 'intermediate' | null
    uri: string | null
  }>
  cicd: Array<{
    id: string
    name: string | null
    proficiency: 'beginner' | 'expert' | 'intermediate' | null
    uri: string | null
  }>
  frontend: Array<{
    id: string
    name: string | null
    proficiency: 'beginner' | 'expert' | 'intermediate' | null
    uri: string | null
  }>
  infra: Array<{
    id: string
    name: string | null
    proficiency: 'beginner' | 'expert' | 'intermediate' | null
    uri: string | null
  }>
  misc: Array<{
    id: string
    name: string | null
    proficiency: 'beginner' | 'expert' | 'intermediate' | null
    uri: string | null
  }>
  mobile: Array<{
    id: string
    name: string | null
    proficiency: 'beginner' | 'expert' | 'intermediate' | null
    uri: string | null
  }>
  testing: Array<{
    id: string
    name: string | null
    proficiency: 'beginner' | 'expert' | 'intermediate' | null
    uri: string | null
  }>
  tooling: Array<{
    id: string
    name: string | null
    proficiency: 'beginner' | 'expert' | 'intermediate' | null
    uri: string | null
  }>
}

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '*[\n      _type == \'certification\'\n      && profile->uri.current == $user\n      && !(_id in path(\'drafts.**\'))\n    ] | order(startDate desc) {\n      "id": _id,\n      "title": name,\n      "about": description[_key == $locale][0].value,\n      "date": certificationDate,\n      "certificate": certificate,\n      "school": school-> { name, location, website, "uri": uri.current, "id": _id },\n      "fields": fields[]-> { "name": name[_key == $locale][0].value, "uri": uri.current, "id": _id }\n    }\n  ': CERTIFICATION_QUERYResult
    '*[\n      _type == \'education\'\n      && profile->uri.current == $user\n      && !(_id in path(\'drafts.**\'))\n    ] | order(startDate desc) {\n      "id": _id,\n      "title": name[_key == $locale][0].value,\n      "about": description[_key == $locale][0].value,\n      "start": startDate,\n      "end": endDate,\n      "school": school-> { name, location, website, "uri": uri.current, "id": _id },\n      "fields": fields[]-> { "name": name[_key == $locale][0].value, "uri": uri.current, "id": _id }\n    }\n  ': EDUCATION_QUERYResult
    '*[\n      _type == \'job\'\n      && profile->uri.current == $user\n      && !(_id in path(\'drafts.**\'))\n    ] | order(startDate desc) {\n      "id": _id,\n      "title": name[_key == $locale][0].value,\n      "about": description[_key == $locale][0].value,\n      "start": startDate,\n      "end": endDate,\n      current,\n      remote,\n      contract,\n      "company": company-> { name, location, website, "uri": uri.current, "id": _id },\n      "skills": skills[]-> { name, "uri": uri.current, "id": _id }\n    }\n  ': JOBS_QUERYResult
    '\n    *[\n      _type == \'language\'\n      && profile->uri.current == $user\n      && !(_id in path(\'drafts.**\'))\n    ] | order(name[_key == $locale][0].value asc) {\n      "id": _id,\n      "title": name[_key == $locale][0].value,\n      "proficiency": proficiency\n    }\n  ': LANGUAGES_QUERYResult
    '\n    *[_type == \'profile\' && uri.current == $user] {\n      email,\n      location,\n      name,\n      phone,\n      "profile": biography[_key == $locale][0].value,\n      "social": {\n        github,\n        linkedin,\n        twitter\n      },\n      "title": title[_key == $locale][0].value,\n    }[0]\n  ': PROFILE_QUERYResult
    '\n    {\n      "backend": *[_type == \'skill\' && category == \'Backend\'] | order(name asc) {\n        "id": _id,\n        name,\n        proficiency,\n        "uri": uri.current\n      },\n      "cicd": *[_type == \'skill\' && category == \'CI/CD\'] | order(name asc) {\n        "id": _id,\n        name,\n        proficiency,\n        "uri": uri.current\n      },\n      "frontend": *[_type == \'skill\' && category == \'Frontend\'] | order(name asc) {\n        "id": _id,\n        name,\n        proficiency,\n        "uri": uri.current\n      },\n      "infra": *[_type == \'skill\' && category == \'Infrastructure\'] | order(name asc) {\n        "id": _id,\n        name,\n        proficiency,\n        "uri": uri.current\n      },\n      "misc": *[_type == \'skill\' && category == \'Misc\'] | order(name asc) {\n        "id": _id,\n        name,\n        proficiency,\n        "uri": uri.current\n      },\n      "mobile": *[_type == \'skill\' && category == \'Mobile\'] | order(name asc) {\n        "id": _id,\n        name,\n        proficiency,\n        "uri": uri.current\n      },\n      "testing": *[_type == \'skill\' && category == \'Testing\'] | order(name asc) {\n        "id": _id,\n        name,\n        proficiency,\n        "uri": uri.current\n      },\n      "tooling": *[_type == \'skill\' && category == \'Tooling\'] | order(name asc) {\n        "id": _id,\n        name,\n        proficiency,\n        "uri": uri.current\n      },\n    }\n  ': SKILLS_QUERYResult
  }
}
